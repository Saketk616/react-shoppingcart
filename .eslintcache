[{"D:\\loc-react\\nine-shoppingcart\\src\\index.js":"1","D:\\loc-react\\nine-shoppingcart\\src\\App.js":"2","D:\\loc-react\\nine-shoppingcart\\src\\reportWebVitals.js":"3","D:\\loc-react\\nine-shoppingcart\\src\\Components\\BuyPage.js":"4","D:\\loc-react\\nine-shoppingcart\\src\\Components\\CartItem.js":"5","D:\\loc-react\\nine-shoppingcart\\src\\Components\\Cart.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":1275,"mtime":1610016000736,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1541,"mtime":1610013877852,"results":"11","hashOfConfig":"8"},{"size":791,"mtime":1610451829486,"results":"12","hashOfConfig":"8"},{"size":2296,"mtime":1609933093227,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"189cxxx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"D:\\loc-react\\nine-shoppingcart\\src\\index.js",[],["28","29"],"D:\\loc-react\\nine-shoppingcart\\src\\App.js",["30"],"D:\\loc-react\\nine-shoppingcart\\src\\reportWebVitals.js",[],"D:\\loc-react\\nine-shoppingcart\\src\\Components\\BuyPage.js",["31","32"],"D:\\loc-react\\nine-shoppingcart\\src\\Components\\CartItem.js",[],"D:\\loc-react\\nine-shoppingcart\\src\\Components\\Cart.js",["33"],"import React from \"react\";\r\nimport {\r\n  Container,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button,\r\n  CardHeader,\r\n  CardBody,\r\n  Card,\r\n  CardFooter,\r\n  Col,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nconst Cart = ({cartItem, buyNow, removeItem}) => {\r\n    let amount = 0;\r\n\r\n\r\n    cartItem.forEach(item => {\r\n        amount = parseFloat(amount) + parseFloat(item.productPrice)\r\n    })\r\n\r\n    return(\r\n        <Container fluid>\r\n            <h1 className=\"text-success\">Your Cart</h1>\r\n            <ListGroup >\r\n                {cartItem.map(item =>(\r\n                    <ListGroupItem  key={item.id}>\r\n                        <Row>\r\n                            <Col>\r\n                            <img \r\n                            height={80}\r\n                            src={item.tinyImage}\r\n                            />\r\n                            </Col>\r\n                            <Col className=\"text-center\">\r\n                                <div className=\"text-primary\">\r\n                                   <h5 style={{textTransform: 'capitalize'}}>{item.productName}</h5> \r\n                                </div>\r\n                                <span className=\"mr-2 text-secondary\">Price: Rs {item.productPrice}</span>\r\n                                <Button color=\"danger\" onClick={() => removeItem(item)}>Remove</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroupItem>\r\n                ))}\r\n            </ListGroup>\r\n            {/* If Everything is Empty  */}\r\n            {\r\n                cartItem.length >= 1 ? (\r\n                    <Card className=\"text-center mt-3\">\r\n                        <CardHeader>\r\n                            Grand Total\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            Your amount for {cartItem.length} product is Rs {amount} only\r\n                        </CardBody>\r\n                        <CardFooter>\r\n                            <Button color=\"success\" onClick={buyNow}>Pay Here</Button>\r\n                        </CardFooter>\r\n                    </Card>\r\n                ):(\r\n                    <h1 className=\"text-warning\"> Cart is Empty</h1>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Cart;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":13},{"ruleId":"38","severity":1,"message":"42","line":8,"column":7,"nodeType":"40","messageId":"41","endLine":8,"endColumn":13},{"ruleId":"38","severity":1,"message":"43","line":10,"column":7,"nodeType":"40","messageId":"41","endLine":10,"endColumn":10},{"ruleId":"44","severity":1,"message":"45","line":31,"column":29,"nodeType":"46","endLine":34,"endColumn":31},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Recat' is defined but never used.","Identifier","unusedVar","'apiKey' is assigned a value but never used.","'url' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]